Capítulo 5 - Repetições.

Repetições representam a base de vários programas. São utilizadas para executar a mesma 
parte de um programa várias vezes. Por exemplo, para imprimir três números na tela, 
poderíamos escrever um programa como:

print(1)
print(2)
print(3)

Podemos imaginar que para imprimir três números, começando de 1 até o 3, devemos variar
print(x), em que x varia de 1 a 3. Vejamos:

x = 1
print(x)
x = 2
print(x)
x = 3
print(x)

Outra solução seria incrementar o valor de x após cada print:

x = 1
print(x)
x = x + 1
print(x)
x = x + 1
print(x)

E se fosse para escrever 100 números? Seria extremamente desagradável escrever 200 
linhas. Para isto, a estrutura de repetição aparece para auxiliar esse tipo de problema. 
Uma das estruturas de repetição do Python é o while, que repete um bloco enquanto a 
condição for verdadeira. Vejamos:

while <condição>:
    bloco

Para resolver o problema de escrever três números utilizando o while, escreveríamos 
assim:

x = 1
while x <= 3:
    print(x)
    x = x + 1

5.1 Contadores 

As estruturas de repetições é muito grande. Imaginamos que temos que imprimir os 
números inteiros entre 1 e um valor digitado pelo usuário. Vejamos:

fim = int(input("Digite o último número a imprimir: "))
x = 1
while x <= fim:
    print(x)
    x = x + 1

Nesse caso, o programa imprimirá de 1 até o valor digitado. Utilizamos a variável 
fim para representar o limite de nossa repetição.

Vejamos outra situação: Imprima apenas os números pares entre 0 e um número digitado
pelo usuário, de forma bem similar ao exemplo anterior. 

fim = int(input("Digite o último número a imprimir: "))
x = 0
while x <= fim:
    if x % 2 == 0:
        print(x)
    x = x + 1

Veja que, para começar a imprimir do 0, e não de 1, modificamos. Um detalhe muito 
importante é que um bloco dentro de if, sendo para isso deslocado à direita.Porém, 
podemos resolver de maneira ainda mais simples: 

fim = int(input("Digite o último número a imprimir: "))
x = 0
while x <= fim:
    print(x)
    x = x + 2

Ou seja, existem mais de uma solução para o problema. Pode ser mais simples ou 
complicadas, porém, ambas estão corretas.

Vejamos outro problema. Imagine um número de tabuada digitado pelo usuário. Essa 
tabuada deve ser impressa de 1 a 10, sendo n o número digitado pelo usuário. Teríamos,
assim, n+1, n+2, ..., n+10.

n = int(input("Tabuada de: "))
x = 1
while x <= 10:
    print(n + x)
    x = x + 1

Contadores também podem ser úteis quando usados com condições dentro dos programas. 
Vejamos um programa para corrigir um teste de múltipla escolha com  três questões. 
A resposta da primeira é “b”; da segunda, “a”; e da terceira, “d”. O programa da 
listagem 5.10 conta um ponto a cada resposta correta.

Listagem 5.10 – Contagem de questões corretas

pontos = 0
questão = 1
while questão <= 3:
    resposta = input(f"Resposta da questão {questão}: ")
    if questão == 1 and resposta == "b":
        pontos = pontos + 1
    if questão == 2 and resposta == "a":
        pontos = pontos + 1
    if questão == 3 and resposta == "d":
        pontos = pontos + 1
    questão = questão + 1
print(f"O aluno fez {pontos} ponto(s)")

Em Python, uma letra minúscula é diferente de uma maiúscula. Se você digitar “A” 
na segunda questão em vez de “a”, o programa não considerará essa resposta correta.
Uma solução para esse tipo de problema é utilizar o operador lógico or e veriﬁcar a 
resposta maiúscula e minúscula. Por exemplo, questão == 1 and (resposta == "b" or 
resposta == "B").

5.2 Acumuladores

Precisamos entender que nem só de contadores o Python precisa, tem programas que para 
calcular o total de uma soma, por exemplo, precisaremos de acumuladores.
Qual a diferença? Nos contadores o valor adicionado é constante e, nos acumuladores
variável.

Vejamos um exemplo que calcula a soma de 100 números. Soma é um acumulador e n é um 
contador.

n = 1
soma = 0
while n <= 10:
    x = int(input(f"Digite o {n} número: "))
    soma = soma + x 
    n = n + 1
print(f"Soma: {soma}")

Podemos definir a média aritmética como a soma de vários números divididos pela 
quantidade de números somados. 

Exemplo: 

média = (n1 + n2 + n3 + n4 + n5)/5 

Em vez de utili zarmos cinco variáveis, vamos acumular os valores à medida que são lidos.

Exemplo de cálculo de média com acumulador:

x = 1
soma = 0
while x <= 5:
    n = int(input(f"{x} Digite o número: "))
    soma = soma + n
    x = x + 1
print(f"Média: {soma/ 5:5.2f}")

Podemos também dizer que soma acumula os valores de n a cada repetição. Logo, diremos 
que a variável soma é um acumulador.
Acumuladores são muito interessantes quando não sabemos ou não conseguimos obter o 
total da soma pela simples multiplicação de dois números. No caso do cálculo da média, 
o valor de n pode ser diferente cada vez que o usuário digitar um valor.

5.3 Interrompendo a repetição

Embora muito útil, a estrutura while só veriﬁca sua condição de parada no início de 
cada repetição. Dependendo do problema, a habilidade de terminar while dentro do bloco 
a repetir pode ser interessante.
A instrução break é utilizada para interromper a execução de while independentemente 
do valor atual de sua condição. Vejamos o exemplo da leitura de valores até que 
digitemos 0 (zero):

s = 0
while True:
    v = int(input("Digite um número a somar ou 0 para sair: "))
    if v == 0:
        break
    s += v
print(s)

Nesse exemplo, substituímos a condição do while por True em ❶. Dessa forma, o while 
executará para sempre, pois o valor de sua condição de parada (True) é constante.
Em ❷ temos a instrução break sendo ativada dentro de um if, especiﬁcamente quando v 
é zero.

# Programa 5.1 - Contagem de cédulas

valor = int(input("Digite o valor a pagar: "))
cédulas = 0
atual = 50
apagar = valor 
while True:
    if atual <= apagar:
    apagar -= atual
    cédulas += 1
    else:
    print(f"{cédulas} cédulas(s) de R${atual}")
    if apagar == 0:
        break
    if atual == 50:
        atual = 20
    elif atual == 20:
        atual = 10
    elif atual == 10:
        atual = 5
    elif atual == 5:
        atual = 1
    cédulas = 0

5.4 Repetições aninhadas 

Pode ocorrer a combinação de vários while para obter resultados interessantes como a
repetição com incremento de duas variáveis. 
Imagine imprimir as tabuadas de multiplicação de 1 a 10.
Vejamos:

tabuada = 1
while tabuada <= 10:
    número = 1
    while número <= 10:
        print(f"{tabuada} x {número} = {tabuada * número}")
        número += 1
    tabuada += 1

